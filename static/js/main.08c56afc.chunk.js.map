{"version":3,"sources":["components/Textarea.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Textarea","_ref","value","onChange","defaultValue","react_default","a","createElement","className","id","rows","Footer","date","Date","Fragment","getFullYear","Component","mdplaceholder","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","input","target","handleMarkdown","element","markdown","marked","sanitize","breaks","__html","DOMPurify","state","style","background","color","href","rel","components_Textarea","onSubmit","dangerouslySetInnerHTML","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08c56afc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Textarea = ({ value, onChange, defaultValue }) => {\n  return (\n    <form>\n      <div className=\"form-group row\">\n        <div className=\"col\">\n          <h2 className=\"text-muted\">Enter your text:</h2>\n\n          <textarea\n            className=\"form-control\"\n            id=\"editor\"\n            rows=\"30\"\n            value={value}\n            onChange={onChange}\n            defaultValue={defaultValue}\n          />\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default Textarea;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    let date = new Date();\n\n    return (\n      <>\n        <hr />\n        <div className=\"row my-3\">\n          <div className=\"col text-center\">\n            <p>\n              made with <i className=\"fas fa-heart text-danger\" />{\" \"}\n              {date.getFullYear()} Nils Domin\n            </p>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Textarea from \"./components/Textarea\";\nimport Footer from \"./components/Footer\";\nimport marked from \"marked\";\nimport DOMPurify from \"dompurify\";\n\nconst mdplaceholder = `\n# This is a h1...\n\n## ...and this a h2 header\n\nA link: https://www.freecodecamp.org/\n\n\\`Inline Code\\`\n\n\\`\\`\\`\nfunction sum(a, b) {\n  return a + b;\n}\n\\`\\`\\`\n\nThis is a\n > Block Quote\n\n* A list item\n\nAn image:\\n![Random Image](https://picsum.photos/200/300)\n\n**Bold Text**\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: mdplaceholder\n    };\n  }\n\n  handleChange = event => {\n    this.setState({\n      input: event.target.value\n    });\n  };\n\n  handleMarkdown = element => {\n    let markdown = marked(element, {\n      sanitize: true,\n      breaks: true\n    });\n    return {\n      __html: DOMPurify.sanitize(markdown)\n    };\n  };\n\n  render() {\n    return (\n      <div\n        className=\"container-fluid\"\n        style={{ background: \"#6699ff\", color: \"#ffffff\" }}\n      >\n        <div className=\"row my-5\">\n          <div className=\"col\">\n            <h1>FCC Markdown Preview</h1>\n            <p className=\"\">\n              Stack:{\" \"}\n              <a\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <span className=\"badge badge-light\">React</span>\n              </a>{\" \"}\n              <a\n                href=\"https://marked.js.org/#/README.md#README.md\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <span className=\"badge badge-light\">Marked.js</span>\n              </a>{\" \"}\n              <a\n                href=\"https://getbootstrap.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <span className=\"badge badge-light\">Bootstrap 4</span>\n              </a>\n            </p>\n          </div>\n        </div>\n        <div className=\"row\" id=\"content\">\n          <div className=\"col border-right\">\n            <Textarea\n              value={this.state.mdplaceholder}\n              onChange={this.handleChange}\n              onSubmit={this.onSubmit}\n              defaultValue={mdplaceholder}\n            />\n          </div>\n          <div className=\"col\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <h2 className=\"text-muted\">Preview:</h2>\n                <hr />\n                <span\n                  id=\"preview\"\n                  dangerouslySetInnerHTML={this.handleMarkdown(\n                    this.state.input\n                  )}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}